// Generated by gencpp from file gatlin/CommandRequest.msg
// DO NOT EDIT!


#ifndef GATLIN_MESSAGE_COMMANDREQUEST_H
#define GATLIN_MESSAGE_COMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gatlin
{
template <class ContainerAllocator>
struct CommandRequest_
{
  typedef CommandRequest_<ContainerAllocator> Type;

  CommandRequest_()
    : id()
    , action()
    , args()  {
    }
  CommandRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , action(_alloc)
    , args(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _args_type;
  _args_type args;




  typedef boost::shared_ptr< ::gatlin::CommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gatlin::CommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CommandRequest_

typedef ::gatlin::CommandRequest_<std::allocator<void> > CommandRequest;

typedef boost::shared_ptr< ::gatlin::CommandRequest > CommandRequestPtr;
typedef boost::shared_ptr< ::gatlin::CommandRequest const> CommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gatlin::CommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gatlin::CommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gatlin

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'gatlin': ['/home/cs4752/ros_ws/src/gatlin/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gatlin::CommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gatlin::CommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gatlin::CommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gatlin::CommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gatlin::CommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gatlin::CommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gatlin::CommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80a96abcd90528945efe829cd73d06eb";
  }

  static const char* value(const ::gatlin::CommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80a96abcd9052894ULL;
  static const uint64_t static_value2 = 0x5efe829cd73d06ebULL;
};

template<class ContainerAllocator>
struct DataType< ::gatlin::CommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gatlin/CommandRequest";
  }

  static const char* value(const ::gatlin::CommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gatlin::CommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A command with a action to id the function and lists of PoseStamped and Topic arguments\n\
string id # \"1\", \"2\"\n\
string action # \"mott\", \"move_base\", \"move_arm\" \n\
\n\
string args\n\
# args[\"target_pose\"] = PoseStamped()\n\
# args[\"obj_topic\"] = \"green_0\"\n\
\n\
# geometry_msgs/PoseStamped[] ps_list\n\
# string[] topic_list\n\
";
  }

  static const char* value(const ::gatlin::CommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gatlin::CommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.action);
      stream.next(m.args);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gatlin::CommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gatlin::CommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "args: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.args);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GATLIN_MESSAGE_COMMANDREQUEST_H
